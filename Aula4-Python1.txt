Rodar o python3
	$python3
Primeiros comandos:
	>>>print('Olá, mundo!')
Pode criar um arquivo de texto em formato '.py', com o código a ser rodado pelo python
	$ vi ola.py -> print('Olá, mundo"'), :w e :q
Agora, para rodar esse arquivo:
	$ python3 ola.py
Podemos rodar o arquivo sem precisar digitar 'Python3', para isso, devemos usar o comando 'chmod' como se segue abaixo:
	$ chmod +x ola.py
Para verificar as permissões do arquivo:
	$ ls -l ola.py
Só assim, não será rodado o código do arquivo, precisamos ainda adicionar mais uma linha nele, que indicará ao python3 quer ele deve rodar o script. Assim, fazer como se segue:
	vi ola.py
	-Adicionar na primeira linha o seguinte: #!/usr/bin/env Python3
	-O arquivo ficará assim:
		#!/usr/bin/env Python3
		print('Olá, mundo!')
Feito isso, podemos agora apenas digitar o símbolo para o diretório atual "." seguido por um "/" e o nome do script para rodá-lo:
	$ ./ola.py


SINTAXE
Um nome de variável será utilizado para identificá-la. No python, uma variável iniciará com uma letra de a até Z, ou então com um underline "_", seguido de zero ou mais letras, travessões e dígitos (0 a 9)
Convenções para nomeação de variáveis em Python
	-A primeira letra deve ser minúscula, exceto em nomes de classes. Classes devem começar com letra maiúscula (p.e. "Seq"
	-Variáveis privadas começam com um "_" (ex.:_private)
	-Strong private variables começam com dois "__" (ex.: __private)
	-Nomes especiais de variável definidas pela linguagem começam e terminam com dois travessões (p.e. __special__)
A lista a seguir contém palavras já determinadas como funções em python, que não podem ser usadas como nomes de variaveis:
and         exec        not
as          finally     or
assert      for         pass
break       from        print
class       global      raise
continue    if          return
def         import      try
del         in          while
elif        is          with
else        lambda      yield
except      list        hash


LINHAS E INDENTAÇÃO
Python considera como um bloco de código linhas adjacentes que apresentam o mesmo nível de indentaçã. Isso mantém organizadas as linhas de código que são executadas de forma conjunta. Erros na indentação irão resultar em um código executada de forma não desejada. Ambientes de Desenvolvimento Interativo (IDEs) e editores de texto podem ajudar a indentar códigos corretamente.
O número de espaços na indetação precisa ser consistente, mas não é específico. Ou seja, todas as linhas ou sentenças dentro de um bloco precisam ser identadas com o mesmo número. No exemplo abaixo, usou-se quatro espaços:
	#!/usr/bin/env python3
	mensagem = '' #cria uma variável vazia
	for x in (1,2,3,4,5):
		if x > 4:
			print ('Olá')
			mensagem = 'x é grande'
		else:
			print(x)
			mensagem = 'x é pequeno'
		print (mensagem)
	print('Pronto!')


COMENTÁRIOS
Devemos incluir comentários para ajudar na identificação do que está sendo feito, sendo que podemos usá-los para descrever algumas coisas, para facilitar o entendimento.
Para criar comentários é só usar "#", sendo que o que vir depois dele não será interpretado pelo python.

LINHAS EM BRANCO
Linhas em branco são importantes para aumentar a legibilidade do código. Devemos separar com uma linha em branco trechos de código que vão juntos, organizando em "parágrafos" de código. Linhas em branco são ignoradas pelo interpretador de Python.


TIPOS DE DADOS E VARIÁVEIS
O primeiro conceito a ser considerado é que os tipos de dados de Python podem ser ou não mutáveis. Números literais, strings e tuplas não podem ser alterados. Listas, dicionários e sets podem. Da mesma forma, variáveis individuais também podem ser alteradas. Você pode armazenar dados na memória por meio da atribuição de variáveis, o que pode ser feito usando o sinal "=".

	NÚMEROS E STRINGS
	São dois tipos comuns de dados. Números literais e strings como 5 ou "meu nome é" são imutáveis. No entanto, seus valores podem ser armazenados em variáveis, as quais podem ser alteradas.
	Por exemplo:
	contagem_genes = 5
	# alterando o valor de contagem_genes
	contagem_genes = 10
	Diferentes tipos de dados podem ser atribuídos a variáveis, como inteiros (1,2,3), números de ponto flutuante (3.1415) e strings ('texto').
	Por exemplo:
	contagem = 10 # este é um número inteiro
	média = 2.531 # este é um número de ponto flutuante
	mensagem = "Bem-vindo ao interpretador de Python" # Isto é uma string
	10, 2.531 e "Bem-vindo ao interpretador de Python" são peças de dados singylares (escalares) e cada um é armazenado em sua própria variável.
	Coleções de dados podem ser armazenados em tipos de dados especiais, i.e., tuplas, listas, sets e dicionários. Devemos sempre armazenar semelhantes com semelhantes, de forma tal que cada elemento da coleção deveria ser do mesmo tipo de dado, como um valor de expressão de RNA-seq ou uma contagem de quantos éxons estão em um gene ou uma sequência de leitura.


LISTAS
-Listas são usadas para armazenar coleções de dados ordenados (indexados)
-Listas são mutáveis: o número de elementos em uma lista e o que é armazenado em cada elemento podem ser alterados
-Listas são delimitadas por colchetes "[]' e seus itens separados por vírgula
	ex.: [ 'atg', 'aaa', 'agg' ]
	índice	valor
	0	atg
	1	aaa
	2	agg
	obs.: a indexação de listas começa com 0


TUPLAS
-Tuplas são similares a listas e contêm coleções de dados ordenados (indexados)
-Tuplas são imutáveis: você não consegue alterar os valores ou número de elementos
-A tupla é delimitada por parênteses '()' e seus itens são separados por vírgula
	ex.: ( 'Jan' , 'Fev' , 'Mar' , 'Abr' , 'Mai' , 'Jun' , 'Jul' , 'Ago' , 'Set' , 'Out' , 'Nov' , 'Dez' )


DICIONÁRIO
-Dicionários são bons para armazenar dados que podem ser representados em uma tabela de duas colunas
-Eles armazenam coleções de dados em pares de chave/valor, sem ordenação específica
-Um dicionário é delimitado por chaves e conjuntos de Chave/Valor separados por vírgula
-Um sinal de dois-pontos é colocado entre cada chave e valor. Vírgulas separam pares de chave:valor
	ex.: { 'TP53' : 'GATGGGATTGGGGTTTTCCCCTCCCATGTGCTCAAGACTGGCGCTAAAAGTTTTGAGCTTCTCAAAAGTC' , 'BRCA1' : 'GTACCTTGATTTCGTATTCTGAGAGGCTGCTGCTTAGCGGTAGCCCCTTGGTTTCCGTGGCAACGGAAAA' } 


